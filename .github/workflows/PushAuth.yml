name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Load environment variables
      run: |
        echo "PG_PASS=$(grep PG_PASS .env | cut -d '=' -f2)" >> $GITHUB_ENV
        echo "PG_USER=$(grep PG_USER .env | cut -d '=' -f2)" >> $GITHUB_ENV
        echo "PG_DB=$(grep PG_DB .env | cut -d '=' -f2)" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        docker-compose build
        docker-compose push
      env:
        PG_PASS: ${{ env.PG_PASS }}
        PG_USER: ${{ env.PG_USER }}
        PG_DB: ${{ env.PG_DB }}

    - name: Start Docker Compose
      run: |
        docker-compose up -d
      env:
        PG_PASS: ${{ env.PG_PASS }}
        PG_USER: ${{ env.PG_USER }}
        PG_DB: ${{ env.PG_DB }}

    - name: Run tests
      run: |
        docker-compose exec server pytest  # Adjust with your test command
      env:
        PG_PASS: ${{ env.PG_PASS }}
        PG_USER: ${{ env.PG_USER }}
        PG_DB: ${{ env.PG_DB }}

    - name: Shut down Docker Compose
      if: always()
      run: |
        docker-compose down
